{"version":3,"file":"MsNodeSqWrapperModule.js","sourceRoot":"","sources":["MsNodeSqWrapperModule.ts"],"names":[],"mappings":"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","sourcesContent":["\n\nimport {SqlClient, Error, Meta, EventColumnCb, PreparedStatement, Query, Connection} from \"msnodesqlv8\";\n\n/**\n * Created by Stephen on 1/22/2017.\n */\n\nexport module MsNodeSqlWrapperModule {\n\n    const legacyDriver: SqlClient = require('msnodesqlv8');\n\n    export class SqlModuleWrapperError implements Error {\n        constructor(public message: string) {\n        }\n\n        sqlstate: string = \"\";\n        code: number = 0;\n    }\n\n    export interface queryCb<T> { (v: T): void\n    }\n\n    export enum SqlCommandType\n    {\n        None,\n        QueryObjectFormat,\n        QueryRawFormat,\n        StoredProcedure,\n        PreparingStatement,\n        PreparedStatement\n    }\n\n    export class SqlCommand {\n\n        constructor(public connection: SqlConnection, public id ?: string, public commandType: SqlCommandType = SqlCommandType.QueryObjectFormat) {\n        }\n\n        _driverTimeoutMs: number | undefined;\n        _wrapperTimeoutMs: number | undefined;\n        _sql: string | undefined;\n        _procedure: string | undefined;\n\n        _inputParams: any[] | undefined;\n\n        _onMeta: queryCb<Meta> | undefined;\n        _onColumn: EventColumnCb | undefined;\n        _onRowCount: queryCb<number> | undefined;\n        _onRow: queryCb<number> | undefined;\n        _onDone: queryCb<any> | undefined;\n        _onSubmitted: queryCb<any> | undefined;\n        _onError: queryCb<string> | undefined;\n        _onClosed: queryCb<string> | undefined;\n\n        _query: Query | undefined;\n        _preparedStatement: PreparedStatement | undefined;\n\n        public isPrepared(): boolean {\n            return this.commandType == SqlCommandType.PreparingStatement;\n        }\n\n        public sql(s: string): SqlCommand {\n            this._sql = s;\n            if (this.commandType == SqlCommandType.None)\n                this.commandType = SqlCommandType.QueryObjectFormat;\n            return this;\n        }\n\n        public params(v: any[]): SqlCommand {\n            this._inputParams = v;\n            return this;\n        }\n\n        public param(v: any): SqlCommand {\n            if (this._inputParams == null) {\n                this._inputParams = [];\n            }\n            this._inputParams.push(v);\n            return this;\n        }\n\n        public procedure(s: string): SqlCommand {\n            this._procedure = s;\n            this.commandType = SqlCommandType.StoredProcedure;\n            this.unsubscribe();\n            return this;\n        }\n\n        public rawFormat(): SqlCommand {\n            this.commandType = SqlCommandType.QueryRawFormat;\n            return this;\n        }\n\n        public wrapperTimeoutMs(to: number): SqlCommand {\n            this._wrapperTimeoutMs = to;\n            return this;\n        }\n\n        public driverTimeoutMs(to: number): SqlCommand {\n            this._driverTimeoutMs = to;\n            return this;\n        }\n\n        public onMeta(cb: queryCb<Meta>): SqlCommand {\n            this._onMeta = cb;\n            return this;\n        }\n\n        public onColumn(cb: EventColumnCb): SqlCommand {\n            this._onColumn = cb;\n            return this;\n        }\n\n        public onRowCount(cb: queryCb<number>): SqlCommand {\n            this._onRowCount = cb;\n            return this;\n        }\n\n        public onRow(cb: queryCb<number>): SqlCommand {\n            this._onRow = cb;\n            return this;\n        }\n\n        public onDone(cb: queryCb<any>): SqlCommand {\n            this._onDone = cb;\n            return this;\n        }\n\n        public onSubmitted(cb: queryCb<any>): SqlCommand {\n            this._onSubmitted = cb;\n            return this;\n        }\n\n        public onError(cb: queryCb<string>): SqlCommand {\n            this._onError = cb;\n            return this;\n        }\n\n        public onClosed(cb: queryCb<string>): SqlCommand {\n            this._onClosed = cb;\n            return this;\n        }\n\n        public unsubscribe(): void {\n            this._onMeta = undefined;\n            this._onColumn = undefined;\n            this._onRowCount = undefined;\n            this._onRow = undefined;\n            this._onDone = undefined;\n            this._onError = undefined;\n            this._onClosed = undefined;\n        }\n\n        private subscribe(): void {\n\n            let query = this._query;\n\n            if (query) {\n                if (this._onMeta != null) {\n                    query.on('meta', (m:any) => this._onMeta(m));\n                }\n                if (this._onColumn != null) {\n                    query.on('column', (c:any, d:any, m:any) => this._onColumn(c, d, m));\n                }\n                if (this._onRowCount != null) {\n                    query.on('rowCount', (m:any) => this._onRowCount(m));\n                }\n                if (this._onRow != null) {\n                    query.on('row', (m:any) => this._onRow(m));\n                }\n                if (this._onDone != null) {\n                    query.on('done', m => this._onDone(m));\n                }\n                if (this._onError != null) {\n                    query.on('error', m => this._onError(m));\n                }\n                if (this._onClosed != null) {\n                    query.on('closed', m => this._onClosed(m));\n                }\n                if (this._onSubmitted != null) {\n                    query.on('submitted', m => this._onSubmitted(m));\n                }\n            }            \n        }\n\n        public subscribing(): boolean {\n            return this._onMeta != null\n                || this._onSubmitted != null\n                || this._onColumn != null\n                || this._onRowCount != null\n                || this._onRow != null\n                || this._onDone != null\n                || this._onError != null\n                || this._onClosed != null\n        }\n\n        private execProcedure(resolve: Function, reject: Function, res: SqlCommandResponse): void {\n            let timeout = this._driverTimeoutMs > 0 ? this._driverTimeoutMs / 1000 : 0;\n            let pm = this.connection.legacy_conn.procedureMgr();\n            pm.setTimeout(timeout);\n            pm.callproc(this._procedure, this._inputParams, (err?: Error, rows?: any[], outputParams?: any[]) => {\n                if (err) {\n                    res.error = err;\n                    reject(res);\n                }\n                else {\n                    res.aggregate(rows);\n                    res.outputParams = outputParams;\n                    resolve(res);\n                }\n            });\n        }\n\n        private execQuery(resolve: Function, reject: Function, res: SqlCommandResponse): void {\n            let timeout = this._driverTimeoutMs > 0 ? this._driverTimeoutMs / 1000 : 0;\n            this._query = this.connection.legacy_conn.query({\n                query_str: this._sql,\n                query_timeout: timeout\n            }, this._inputParams, (err: Error, rows: any[], more: boolean) => {\n                if (err) {\n                    res.error = err;\n                    reject(res);\n                } else {\n                    res.aggregate(rows);\n                    if (!more) resolve(res);\n                }\n            });\n        }\n\n        private execQueryRaw(resolve: Function, reject: Function, res: SqlCommandResponse): void {\n            let timeout = this._driverTimeoutMs > 0 ? this._driverTimeoutMs / 1000 : 0;\n            this._query = this.connection.legacy_conn.queryRaw({\n                query_str: this._sql,\n                query_timeout: timeout\n            }, this._inputParams, (err?: Error, rawData?: RawData, more?: boolean) => {\n                if (err) {\n                    res.error = err;\n                    reject(res);\n                } else {\n                    res.aggregateRaw(rawData);\n                    if (!more) resolve(res);\n                }\n            });\n        }\n\n        private execPrepared(resolve: Function, reject: Function, res: SqlCommandResponse): void {\n            this._preparedStatement.preparedQuery(\n                this._inputParams, (err: Error, rows: any[], more: boolean) => {\n                    if (err) {\n                        res.error = err;\n                        reject(res);\n                    } else {\n                        res.aggregate(rows);\n                        if (!more) resolve(res);\n                    }\n                });\n        }\n\n        public cancel(): Promise<SqlCommand> {\n            return new Promise((resolve, reject) => {\n                let inst = this;\n                if (!this._query) {\n                    reject(new SqlModuleWrapperError('can only cancel a submitted query.'));\n                    return;\n                }\n                this._query.cancelQuery(err => {\n                    if (!err) reject(new SqlModuleWrapperError(`failed to cancel: ${err.message}`));\n                    resolve(inst);\n                })\n            });\n        }\n\n        public freePrepared(): Promise<SqlCommand> {\n            return new Promise((resolve, reject) => {\n                let inst = this;\n                if (this.commandType != SqlCommandType.PreparedStatement) {\n                    reject(new SqlModuleWrapperError('freePrepared must be called on prepared command.'));\n                    return;\n                }\n                this._preparedStatement.free(() => {\n                    inst._preparedStatement = null;\n                    inst.commandType = SqlCommandType.None;\n                    resolve(inst);\n                })\n            });\n        }\n\n        public prepare(): Promise<SqlCommand> {\n            return new Promise((resolve, reject) => {\n                if (this._sql == null) {\n                    reject(new SqlModuleWrapperError('prepare must be called after sql() with sql to prepare.'));\n                    return;\n                }\n                if (this.commandType == SqlCommandType.PreparingStatement) {\n                    reject(new SqlModuleWrapperError('prepare is preparing and must be called once only on a command.'));\n                    return;\n                }\n                if (this._preparedStatement != null) {\n                    reject(new SqlModuleWrapperError('this command has previously been prepared.'));\n                    return;\n                }\n                this.commandType = SqlCommandType.PreparingStatement;\n                this.unsubscribe();\n                let inst = this;\n                this.connection.legacy_conn.prepare(this._sql, (err?: Error, statement?: PreparedStatement) => {\n                    if (err) {\n                        reject(err);\n                        inst.commandType = SqlCommandType.None;\n                    } else {\n                        inst._preparedStatement = statement;\n                        inst.commandType = SqlCommandType.PreparedStatement;\n                        resolve(inst);\n                    }\n                })\n            });\n        }\n\n        private dispatchCommandType(resolve: Function, reject: Function, res: SqlCommandResponse): void {\n            switch (this.commandType) {\n\n                case SqlCommandType.QueryObjectFormat: {\n                    this.execQuery(resolve, reject, res);\n                    break;\n                }\n\n                case SqlCommandType.QueryRawFormat: {\n                    this.execQueryRaw(resolve, reject, res);\n                    break;\n                }\n\n                case SqlCommandType.StoredProcedure: {\n                    this.execProcedure(resolve, reject, res);\n                    break;\n                }\n\n                case SqlCommandType.PreparingStatement: {\n                    res.error = new SqlModuleWrapperError(`statement not yet prepared.`);\n                    break;\n                }\n\n                case SqlCommandType.PreparedStatement: {\n                    this.execPrepared(resolve, reject, res);\n                    break;\n                }\n\n                default: {\n                    res.error = new SqlModuleWrapperError(`${this.commandType} is not valid value.`);\n                    break;\n                }\n            }\n        }\n\n        public execute(): Promise<SqlCommandResponse> {\n\n            return new Promise((resolve, reject) => {\n                let res = new SqlCommandResponse();\n                let to = this._wrapperTimeoutMs;\n                if (to > 0) {\n                    setTimeout(to, () => {\n                        res.error = new SqlModuleWrapperError(`wrapper timeout ${to} expired.`);\n                        reject(res);\n                    });\n                }\n\n                this.dispatchCommandType(resolve, reject, res);\n\n                if (res.error != null) {\n                    reject(res);\n                } else if (this.subscribing()) {\n                    this.subscribe()\n                }\n            })\n        }\n    }\n\n    export class RawData implements RawData {\n        public meta: Meta[] = [];\n        public rows: Array<any[]> [];\n    }\n\n    export class SqlCommandResponse {\n\n        public aggregateRaw(raw: RawData) {\n            let rd = this.rawData;\n            if (rd == null) {\n                this.rawData = rd = new RawData();\n                rd.meta = raw.meta;\n                rd.rows = [];\n            }\n\n            raw.rows.forEach(row => rd.rows.push(row));\n            \n        }\n\n        public aggregate(rows: any[]) {\n            if (this.asObjects == null) {\n                this.asObjects = [];\n            }\n            rows.forEach(r => this.asObjects.push(r));\n        }\n\n        public error: Error | undefined;\n        public asObjects: any[] = [];\n        public outputParams: any[] | undefined;\n        public rawData: RawData | undefined;\n    }\n\n    export interface dictIteratorCb<T> { (key: string, val: T): void\n    }\n\n    export class Dictionary<T> {\n\n        container: {[id: string]: T;} = {};\n\n        public count(): number {\n            let keys = Object.keys(this.container);\n            return keys.length;\n        }\n\n        public values(): T[] {\n            let va: T[] = [];\n            let keys = Object.keys(this.container);\n            keys.forEach(k => va.push(this.container[k]));\n            return va;\n        }\n\n        public keys(): string[] {\n            return Object.keys(this.container);\n        }\n\n        public containsKey(key: string): boolean {\n            return this.container[key] != null;\n        }\n\n        public add(key: string, v: T): void {\n            if (this.containsKey(key)) throw new Error(`duplicate key ${key}`);\n            this.container[key] = v;\n        }\n\n        public remove(key: string): void {\n            delete this.container[key];\n        }\n\n        public get(key: string): T {\n            return this.container[key];\n        }\n\n        public forEach(cb: dictIteratorCb<T>) {\n            Object.keys(this.container).forEach((k: string) => cb(k, this.container[k]));\n        }\n    }\n\n    export class ConnectionPool {\n        connections: Dictionary<Connection> = new Dictionary<Connection>();\n    }\n\n    export class CommandCache {\n        public CachedCommands: Dictionary<SqlCommand> = new Dictionary<SqlCommand>();\n\n        constructor(public connection: SqlConnection) {\n        }\n\n        public get(id?: string): SqlCommand {\n            if (id == null) return new SqlCommand(this.connection);\n            let cached = this.CachedCommands.get(id);\n            if (cached == null) {\n                cached = new SqlCommand(this.connection);\n                this.CachedCommands.add(id, cached);\n            }\n            return cached;\n        }\n\n        public free(commandId?: string): Promise<string> {\n            return new Promise((resolve, reject) => {\n                let c: SqlCommand = this.CachedCommands.get(commandId);\n                if (c == null) {\n                    reject(false);\n                    return;\n                }\n                if (c.isPrepared()) {\n                    c.freePrepared().then(() => {\n                        this.CachedCommands.remove(commandId);\n                        resolve(commandId);\n                    });\n                } else {\n                    this.CachedCommands.remove(commandId);\n                    resolve(commandId);\n                }\n            });\n        }\n\n        public deleteAll(): Promise<boolean> {\n            return new Promise((resolve, reject) => {\n                this.CachedCommands.forEach((id, c) => {\n                    this.free(id).then(()=> {\n                        if (this.CachedCommands.count() == 0) {\n                            resolve(true);\n                        }\n                    }).catch(e => {\n                        reject(e);\n                    })\n                });\n            });\n        }\n    }\n\n    export class SqlConnection {\n\n        public CommandCache: CommandCache;\n\n        constructor(public legacy_conn: Connection) {\n            this.CommandCache = new CommandCache(this);\n        }\n\n        public id(): string {\n            return this.legacy_conn.id.toString();\n        }\n\n        public getCommand() : SqlCommand {\n            return new SqlCommand(this);\n        }\n\n        public static getLegacy(): SqlClient {\n            return legacyDriver;\n        }\n\n        public close(): Promise<any> {\n            return new Promise((resolve, reject) => {\n                this.legacy_conn.close((err: Error) => {\n                    if (err) reject(err);\n                    else resolve();\n                })\n            });\n        }\n    }\n\n    export class Sql {\n\n        constructor(public connStr: string) {\n        }\n\n        public execute(sql:string, params:any = [], raw:boolean = false) : Promise<SqlCommandResponse> {\n            return new Promise((resolve, reject) => {\n                this.open().then( (connection : SqlConnection) => {\n                    let command = new SqlCommand(connection);\n                    if (raw) command = command.rawFormat();\n                    command.sql(sql).params(params).execute().then(res=> {\n                        connection.close().then(() => {\n                            resolve(res);\n                        }).catch(e=>{\n                            reject(e);\n                        });\n                    }).catch(e=> {\n                        reject(e);\n                    })\n                }).catch(e=> {\n                    reject(e);\n                });\n            });\n        }\n\n        public open(timeout: number = 0): Promise<SqlConnection> {\n            return new Promise((resolve, reject) => {\n                legacyDriver.open({\n                    conn_str: this.connStr,\n                    conn_timeout: timeout\n                }, (err: Error, legacy: any) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        let connection = new SqlConnection(legacy);\n                        resolve(connection);\n                    }\n                });\n            });\n        }\n    }\n}"]}